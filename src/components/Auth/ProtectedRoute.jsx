/* eslint-disable react/prop-types */
import { useState, useEffect } from "react";

const ProtectedRoute = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuthentication = async () => {
      try {
        // Retrieve the authentication token
        const token = localStorage.getItem("token");

        if (!token) {
          redirectToLogin();
          return;
        }

        // Verify the token with the backend
        const response = await fetch(
          `${import.meta.env.VITE_API_URL}/api/auth/verify`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        const data = await response.json();

        if (data.status === "success") {
          // Token is valid
          setIsAuthenticated(true);
        } else {
          // Token is invalid or expired
          redirectToLogin();
        }
      } catch (error) {
        console.error("Authentication check failed:", error);
        redirectToLogin();
      } finally {
        setIsLoading(false);
      }
    };

    // Function to redirect to login page
    const redirectToLogin = () => {
      // Remove invalid token
      localStorage.removeItem("authToken");

      // Redirect to login page
      window.location.href = "/login";
    };

    // Run authentication check
    checkAuthentication();
  }, []);

  // Loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-base-200">
        <div className="text-center">
          <div role="status">
            <svg
              aria-hidden="true"
              className="inline w-10 h-10 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
              viewBox="0 0 100 101"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                fill="currentColor"
              />
              <path
                d="M93.9676 39.0409C96.393 38.4275 97.8624 35.9354 97.0079 33.6175C95.2932 28.8372 92.871 24.3692 89.8167 20.3425C85.8452 15.1475 80.8826 10.7882 75.2124 7.02289C69.5422 3.25757 63.2754 0.188918 56.7698 0.368367C50.2643 0.547815 43.8136 2.91399 38.4501 6.80976C33.0866 10.7055 28.9393 15.9171 26.6547 21.8843C24.3701 27.8515 23.9507 34.2462 25.4677 40.3803C26.9847 46.5143 30.3906 52.1192 35.1479 56.4492C36.2135 57.4424 37.4344 57.9648 38.6852 58.0096C40.5563 58.0729 42.41 56.6351 42.7631 54.7269C43.1161 52.8187 41.8054 50.9557 40.0476 50.1646C36.8557 48.6262 34.1457 46.2094 32.1345 43.1658C30.1234 40.1222 29.0085 36.4773 28.8854 32.7391C28.7624 29.0009 29.5365 25.2935 31.1236 21.9073C32.7107 18.5211 35.0589 15.5673 37.9139 13.3306C40.7689 11.0938 44.0462 9.63211 47.4615 9.09875C50.8768 8.56539 54.3637 8.96434 57.5741 10.2608C60.7844 11.5572 63.621 13.7241 65.7516 16.5001C67.8822 19.2761 69.2399 22.5604 69.6587 26.0092C69.7982 27.1618 70.4787 28.1918 71.5174 28.7837C72.5561 29.3756 73.8502 29.4723 74.9532 28.9534C76.0562 28.4345 76.8051 27.3614 76.8839 26.1582C76.9626 24.9549 76.3631 23.8282 75.3439 23.1468C74.5793 22.5817 73.8932 21.9539 73.2926 21.2702C71.7371 19.4703 69.825 17.9216 67.6339 16.7115C65.4428 15.5015 63.0141 14.6551 60.4958 14.2165C57.9775 13.7778 55.3924 13.7583 52.8682 14.1586C50.344 14.5589 47.9336 15.3716 45.7704 16.5532C43.6072 17.7349 41.7362 19.2602 40.2595 21.0466C38.7828 22.833 37.6296 24.8472 36.8654 27.0128C36.1013 29.1783 35.7398 31.4605 35.8012 33.75C35.8626 36.0395 36.3457 38.2993 37.2187 40.4192C38.0918 42.5392 39.3398 44.4765 40.8953 46.1229C41.7018 46.9657 42.7398 47.4427 43.8219 47.4627C45.5027 47.4907 47.0632 46.1731 47.3046 44.5134C47.5461 42.8538 46.4905 41.2652 45.0324 40.7987C43.9207 40.4364 42.9538 39.8353 42.1098 39.0286C41.2657 38.2219 40.5639 37.2303 40.0398 36.1126C39.5157 34.9948 39.1795 33.7744 39.0474 32.5188C38.9153 31.2632 39.0897 29.9963 39.5602 28.8114C40.0307 27.6266 40.7867 26.5509 41.7775 25.6603C42.7682 24.7697 43.9694 24.0856 45.2931 23.6546C46.6167 23.2237 48.0289 23.0549 49.4386 23.1581C50.8484 23.2613 52.221 23.6338 53.4701 24.2501C54.7192 24.8664 55.8173 25.7138 56.6988 26.7437C57.5803 27.7736 58.2291 28.9682 58.6061 30.25C58.8959 31.2605 59.6585 32.0792 60.6388 32.4128C61.6191 32.7464 62.7005 32.5585 63.5118 31.9017C64.3231 31.2448 64.7737 30.2011 64.6513 29.1582C64.4246 27.1849 63.8013 25.2782 62.8189 23.5438C61.8365 21.8094 60.5206 20.2882 58.9457 19.0545C57.3708 17.8208 55.5665 16.9052 53.6349 16.365C51.7034 15.8248 49.6837 15.6708 47.6936 15.914C45.7035 16.1572 43.7872 16.7928 42.0394 17.7797C40.2915 18.7665 38.7467 20.0847 37.4952 21.6634C36.2438 23.2422 35.3121 25.0525 34.7524 26.9875C34.1926 28.9225 34.0148 30.9418 34.231 32.9399C34.4471 34.9379 35.0523 36.8768 36.0067 38.6416C36.9611 40.4064 38.242 41.961 39.7743 43.2227C40.4508 43.7767 41.2005 44.2596 42.0042 44.6616C41.9423 44.8985 41.9105 45.1433 41.9105 45.3909C41.9105 47.0726 43.2289 48.4381 44.8577 48.4381C45.7917 48.4381 46.6291 47.9798 47.1272 47.2561C48.6863 48.1752 50.4516 48.7118 52.3066 48.8066C54.8413 48.9355 57.3464 48.1817 59.3964 46.6677C61.4463 45.1538 62.9015 42.8786 63.4716 40.3166C64.0418 37.7546 63.6875 35.0767 62.4715 32.75C61.2555 30.4233 59.2567 28.5742 56.8438 27.5168C54.4308 26.4594 51.7403 26.1666 49.1584 26.6853C46.5764 27.2041 44.2563 28.5015 42.5169 30.3869C40.7775 32.2724 39.7125 34.6467 39.4527 37.1633C39.1928 39.6798 39.7539 42.2141 41.0548 44.3561C41.3857 44.8935 41.7935 45.3902 42.2673 45.8358C41.425 46.0529 40.6391 46.4008 39.9308 46.8694C38.5031 47.7666 37.3898 49.0497 36.6816 50.5454C35.9733 52.0411 35.7002 53.6979 35.8929 55.3334C36.0856 56.9689 36.7348 58.5162 37.7608 59.8115C38.7868 61.1067 40.1422 62.0962 41.6766 62.6809C43.2109 63.2657 44.8669 63.4246 46.4786 63.1331C48.0904 62.8416 49.5957 62.1114 50.8408 61.0167C52.086 59.922 53.0259 58.5019 53.5614 56.907C54.0969 55.3121 54.2059 53.6033 53.8769 51.9562C53.5479 50.3091 52.7927 48.7811 51.6896 47.5176C51.0424 46.8076 50.2805 46.2127 49.4386 45.7578C50.2367 44.6578 50.8375 43.4205 51.212 42.1048C51.5865 40.7891 51.7294 39.4147 51.6342 38.0476C51.539 36.6805 51.2073 35.3433 50.6552 34.0905C50.1031 32.8376 49.3402 31.6943 48.4062 30.7155C47.4723 29.7368 46.3869 28.9401 45.2067 28.368C43.8384 27.6967 42.3442 27.2731 40.8115 27.1213C39.2788 26.9695 37.7335 27.0929 36.2551 27.4847C34.7768 27.8765 33.3955 28.5285 32.1842 29.4102C30.9728 30.2919 29.9521 31.3839 29.1735 32.6338C28.3948 33.8837 27.8705 35.2652 27.6318 36.7055C27.3931 38.1459 27.4453 39.6159 27.7855 41.0347C28.1256 42.4535 28.747 43.7909 29.6131 44.9643C30.4792 46.1377 31.5589 47.0987 32.7973 47.7976"
                fill="currentColor"
              />
            </svg>
            <span className="sr-only">Loading...</span>
          </div>
          <p className="mt-4 text-gray-600">Verifying authentication...</p>
        </div>
      </div>
    );
  }

  // If authenticated, render children (protected content)
  return isAuthenticated ? children : null;
};

export default ProtectedRoute;
